# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from imu_3dm_gx4/FilterOutput.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class FilterOutput(genpy.Message):
  _md5sum = "40af8b09da9b33d02fc6b6288f52b159"
  _type = "imu_3dm_gx4/FilterOutput"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# Output from the 3DM-GX4 attitude estimation filter.
std_msgs/Header header

# Node on status flags:
# Status flags are implemented as bit-fields.
#  0 = invalid
#  1 = valid
#  2 = valid and geo-magnetically referenced (quat_status only)
#
# Note that covariance on orientation becomes invalid as pitch angle exceeds 70 # degrees. This will be indicated by the status flag.

# Quaternion status:
uint16 quat_status

# Bias status
uint16 bias_status

# Orientation estimate and diagonal covariance
geometry_msgs/Quaternion orientation
float64[9] orientation_covariance

# Gyro bias and diagonal covariance
geometry_msgs/Vector3 bias
float64[9] bias_covariance

# Covariance statuses
uint16 bias_covariance_status
uint16 orientation_covariance_status

# Constants
uint16 STATUS_INVALID = 0
uint16 STATUS_VALID = 1
uint16 STATUS_VALID_REFERENCED = 2

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  # Pseudo-constants
  STATUS_INVALID = 0
  STATUS_VALID = 1
  STATUS_VALID_REFERENCED = 2

  __slots__ = ['header','quat_status','bias_status','orientation','orientation_covariance','bias','bias_covariance','bias_covariance_status','orientation_covariance_status']
  _slot_types = ['std_msgs/Header','uint16','uint16','geometry_msgs/Quaternion','float64[9]','geometry_msgs/Vector3','float64[9]','uint16','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,quat_status,bias_status,orientation,orientation_covariance,bias,bias_covariance,bias_covariance_status,orientation_covariance_status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FilterOutput, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.quat_status is None:
        self.quat_status = 0
      if self.bias_status is None:
        self.bias_status = 0
      if self.orientation is None:
        self.orientation = geometry_msgs.msg.Quaternion()
      if self.orientation_covariance is None:
        self.orientation_covariance = [0.,0.,0.,0.,0.,0.,0.,0.,0.]
      if self.bias is None:
        self.bias = geometry_msgs.msg.Vector3()
      if self.bias_covariance is None:
        self.bias_covariance = [0.,0.,0.,0.,0.,0.,0.,0.,0.]
      if self.bias_covariance_status is None:
        self.bias_covariance_status = 0
      if self.orientation_covariance_status is None:
        self.orientation_covariance_status = 0
    else:
      self.header = std_msgs.msg.Header()
      self.quat_status = 0
      self.bias_status = 0
      self.orientation = geometry_msgs.msg.Quaternion()
      self.orientation_covariance = [0.,0.,0.,0.,0.,0.,0.,0.,0.]
      self.bias = geometry_msgs.msg.Vector3()
      self.bias_covariance = [0.,0.,0.,0.,0.,0.,0.,0.,0.]
      self.bias_covariance_status = 0
      self.orientation_covariance_status = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2H4d.pack(_x.quat_status, _x.bias_status, _x.orientation.x, _x.orientation.y, _x.orientation.z, _x.orientation.w))
      buff.write(_struct_9d.pack(*self.orientation_covariance))
      _x = self
      buff.write(_struct_3d.pack(_x.bias.x, _x.bias.y, _x.bias.z))
      buff.write(_struct_9d.pack(*self.bias_covariance))
      _x = self
      buff.write(_struct_2H.pack(_x.bias_covariance_status, _x.orientation_covariance_status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.orientation is None:
        self.orientation = geometry_msgs.msg.Quaternion()
      if self.bias is None:
        self.bias = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.quat_status, _x.bias_status, _x.orientation.x, _x.orientation.y, _x.orientation.z, _x.orientation.w,) = _struct_2H4d.unpack(str[start:end])
      start = end
      end += 72
      self.orientation_covariance = _struct_9d.unpack(str[start:end])
      _x = self
      start = end
      end += 24
      (_x.bias.x, _x.bias.y, _x.bias.z,) = _struct_3d.unpack(str[start:end])
      start = end
      end += 72
      self.bias_covariance = _struct_9d.unpack(str[start:end])
      _x = self
      start = end
      end += 4
      (_x.bias_covariance_status, _x.orientation_covariance_status,) = _struct_2H.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2H4d.pack(_x.quat_status, _x.bias_status, _x.orientation.x, _x.orientation.y, _x.orientation.z, _x.orientation.w))
      buff.write(self.orientation_covariance.tostring())
      _x = self
      buff.write(_struct_3d.pack(_x.bias.x, _x.bias.y, _x.bias.z))
      buff.write(self.bias_covariance.tostring())
      _x = self
      buff.write(_struct_2H.pack(_x.bias_covariance_status, _x.orientation_covariance_status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.orientation is None:
        self.orientation = geometry_msgs.msg.Quaternion()
      if self.bias is None:
        self.bias = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.quat_status, _x.bias_status, _x.orientation.x, _x.orientation.y, _x.orientation.z, _x.orientation.w,) = _struct_2H4d.unpack(str[start:end])
      start = end
      end += 72
      self.orientation_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      _x = self
      start = end
      end += 24
      (_x.bias.x, _x.bias.y, _x.bias.z,) = _struct_3d.unpack(str[start:end])
      start = end
      end += 72
      self.bias_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      _x = self
      start = end
      end += 4
      (_x.bias_covariance_status, _x.orientation_covariance_status,) = _struct_2H.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_3d = struct.Struct("<3d")
_struct_2H = struct.Struct("<2H")
_struct_2H4d = struct.Struct("<2H4d")
_struct_9d = struct.Struct("<9d")
