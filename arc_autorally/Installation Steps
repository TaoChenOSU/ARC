ARC research took us down several simulation paths as we tested platforms for
use in our project.

Two such simulation environments were Georgia Tech's AutoRally platform and the
ROS-Stage simulation platform.

Step-by-step instructions on how to run our
implementation of the GT AutoRally <- make a link -- simulation platform.


1. First, go to https://github.com/AutoRally/autorally and follow the instructions to
  install the AutoRally platform. Be sure to follow the instructions carefully and completely, failure to do so may result in an incomplete installation that will require extended time to troubleshoot.

2. NOTE: It is assumed from this point on that you have already gone through the "Autonomous Driving in Simulation" instructions at https://github.com/AutoRally/autorally

The following instructions are intended for AFTER initial setup and first run through.

3. Keep all simulation configuration according to the AutoRally specifications.
  e.g. stateEstimator's InvertY and InvertZ values.

4. Navigate to the work space where you put the AutoRally package. And then go to the
  src/autorally directory.

5. Under autorally_description/urdf, replace the "autoRallyPlatform.urdf.xacro"
  file with file of the same name that we provide.

6. Copy the "world" folder we provide to autorally_description/models.

7. Under autorally_description, there is a file named "empty_sky_AR.world".
  Copy the code below to the end of the file (before the last "</world>"):
    <include>
      <uri>model://urdf/models/world</url>
    </include>

8. Under autorally_gazebo/launch, there is a file named "autoRallyTrackWorld.launch",
  comment out the last node (named "spawn_track").

9. Copy the "autorally_smartdriving" folder to src/autorally.

10. Open a terminal, navigate to your work space. The directory that contains
  devel/, src/ and build/.

11. Use "catkin_make" to compile the package.

12. Open the bashrc by typing in "gedit ~/.bashrc".

13. At the bottom of the file, add these two lines:
  source workspace_directory/devel/setup.bash
  source workspace_directory/src/autorally/autorally_util/setupEnvLocal.sh
  (Replace the workspace_directory with your actually work space directory)

14. Copy the run_autorally.sh we provide to your work space.

15. Open another terminal, navigate to your work space and run the "run_autorally.sh" script.

16. A couple of windows will pop up. There is one that is titled "rqt_publisher"

17. Set runstop true and check the check box.

18. Set the speed to 3 and check the check box.

19. Run these two commands in two of the tmux windows:
  roslaunch autorally_smartdriving autorally_configuration.launch
  roslaunch autorally_smartdriving move_base.launch

20. Go back to the rqt_publisher window and uncheck the constantspeedcontroller
  message.

21. Terminate the waypointfollower and the constantspeedcontroller.

22. Copy the rviz config file we provide.

23. roslaunch autorally_smartdriving auto_turn.launch

24. run rviz with the rviz config file.

25. Now you can set goals through Rviz and the car should go towards the
  goal autonomously
